
version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: prediction_data
    ports:
      - "5431:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.9.1
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__SECRET_KEY: my-very-secure-key
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/prediction_data
    volumes:
      - ./dags:/opt/airflow/dags
      - ./customer_churn_data.csv:/opt/airflow/dags/customer_churn_data.csv
    command: >
      bash -c "airflow db init && airflow users create --username admin --firstname Vaibhav --lastname Aralkar --role Admin --email admin@example.com --password admin"


  airflow-webserver:
    image: apache/airflow:2.9.1
    depends_on:
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__SECRET_KEY: my-very-secure-key
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/prediction_data
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./customer_churn_data.csv:/opt/airflow/dags/customer_churn_data.csv
    ports:
      - "8080:8080"
    command: webserver

  airflow-scheduler:
    image: apache/airflow:2.9.1
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__WEBSERVER__SECRET_KEY: my-very-secure-key
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:postgres@postgres:5432/prediction_data
    volumes:
      - ./dags:/opt/airflow/dags
      - ./customer_churn_data.csv:/opt/airflow/dags/customer_churn_data.csv
    command: scheduler

  pg_db_creation:
    build:
      context: ./pg_db_creation
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  data_load:
    build:
      context: ./data_load
    depends_on:
      - pg_db_creation
    restart: "no"
    volumes:
      - .:/data

  data_cleaning:
    build:
      context: ./data_cleaning
    depends_on:
      - data_load
    restart: "no"

  app:
    build:
      context: ./app
    ports:
      - "8501:8501"
    depends_on:
      - data_cleaning
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=prediction_data

volumes:
  pgdata:
